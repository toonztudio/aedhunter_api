[
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "http.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.client",
        "description": "http.client",
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "backup",
        "description": "backup",
        "isExtraImport": true,
        "detail": "backup",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "backup",
        "description": "backup",
        "isExtraImport": true,
        "detail": "backup",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "transforms",
        "importPath": "torchvision",
        "description": "torchvision",
        "isExtraImport": true,
        "detail": "torchvision",
        "documentation": {}
    },
    {
        "label": "ssl._create_default_https_context",
        "kind": 5,
        "importPath": "backup",
        "description": "backup",
        "peekOfCode": "ssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI()\n# model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"yolov5s.pt\")\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"hello\"}\n@app.get(\"/predicts\")\nasync def predicts(\n    urls: list = Query(..., description=\"List of URLs of the images to predict\")",
        "detail": "backup",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backup",
        "description": "backup",
        "peekOfCode": "app = FastAPI()\n# model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"yolov5s.pt\")\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"hello\"}\n@app.get(\"/predicts\")\nasync def predicts(\n    urls: list = Query(..., description=\"List of URLs of the images to predict\")\n):",
        "detail": "backup",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "backup",
        "description": "backup",
        "peekOfCode": "model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"yolov5s.pt\")\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"hello\"}\n@app.get(\"/predicts\")\nasync def predicts(\n    urls: list = Query(..., description=\"List of URLs of the images to predict\")\n):\n    detected_objects_list = []\n    for url in urls:",
        "detail": "backup",
        "documentation": {}
    },
    {
        "label": "KeywordRequest",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class KeywordRequest(BaseModel):\n    kw: List[str]\n    num: int\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"ok\"}\n@app.post(\"/search\")\nasync def search_by_kw(request_data: KeywordRequest):\n    kw = request_data.kw\n    num = request_data.num",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_yolov5",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_yolov5():\n    model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\n    model.conf = 0.01\n    # model.conf = 0.5\n    return model\nmodel = get_yolov5()\nssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "get_image_from_url",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_image_from_url(url):\n    try:\n        # Send a GET request to the URL to fetch the image\n        response = requests.get(url, verify=False)\n        # Check if the request was successful (status code 200)\n        if response.status_code == 200:\n            # Open the image using PIL\n            image = Image.open(io.BytesIO(response.content))\n            return image\n        else:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "model = get_yolov5()\nssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "ssl._create_default_https_context",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "ssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\ndef get_image_from_url(url):\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "KeywordRequest",
        "kind": 6,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "class KeywordRequest(BaseModel):\n    kw: List[str]\n    num: int\n@app.post(\"/search\")\nasync def search_by_kw(request_data: KeywordRequest):\n    kw = request_data.kw\n    num = request_data.num\n    all_data = []\n    for keyword in kw:\n        conn = http.client.HTTPSConnection(\"google.serper.dev\")",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "get_yolov5",
        "kind": 2,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "def get_yolov5():\n    model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\n    model.conf = 0.01\n    # model.conf = 0.5\n    return model\ndef get_image_from_bytes(binary_image, max_size=1024):\n    input_image = Image.open(io.BytesIO(binary_image)).convert(\"RGB\")\n    width, height = input_image.size\n    resize_factor = min(max_size / width, max_size / height)\n    resized_image = input_image.resize(",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "get_image_from_bytes",
        "kind": 2,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "def get_image_from_bytes(binary_image, max_size=1024):\n    input_image = Image.open(io.BytesIO(binary_image)).convert(\"RGB\")\n    width, height = input_image.size\n    resize_factor = min(max_size / width, max_size / height)\n    resized_image = input_image.resize(\n        (\n            int(input_image.width * resize_factor),\n            int(input_image.height * resize_factor),\n        )\n    )",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "get_image_from_bytes",
        "kind": 2,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "def get_image_from_bytes(image_bytes):\n    # Function to convert image bytes to a PIL Image\n    return Image.open(io.BytesIO(image_bytes))\ndef get_image_from_url(url):\n    try:\n        # Send a GET request to the URL to fetch the image\n        response = requests.get(url, verify=False)\n        # Check if the request was successful (status code 200)\n        if response.status_code == 200:\n            # Open the image using PIL",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "get_image_from_url",
        "kind": 2,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "def get_image_from_url(url):\n    try:\n        # Send a GET request to the URL to fetch the image\n        response = requests.get(url, verify=False)\n        # Check if the request was successful (status code 200)\n        if response.status_code == 200:\n            # Open the image using PIL\n            image = Image.open(io.BytesIO(response.content))\n            return image\n        else:",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "get_image_from_bytes",
        "kind": 2,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "def get_image_from_bytes(image_bytes):\n    return Image.open(io.BytesIO(image_bytes))\n@app.post(\"/object-to-img\")\nasync def detect_food_return_base64_img(file: bytes = File(...)):\n    input_image = get_image_from_bytes(file)\n    results = model(input_image)\n    results.render()  # updates results.imgs with boxes and labels\n    for img in results.ims:\n        bytes_io = io.BytesIO()\n        img_base64 = Image.fromarray(img)",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "model = get_yolov5()\nssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "ssl._create_default_https_context",
        "kind": 5,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "ssl._create_default_https_context = ssl._create_unverified_context\napp = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "app = FastAPI(\n    title=\"Custom YOLOV5 Machine Learning API\",\n    description=\"\"\"Obtain object value out of image\n                    and return image and json result\"\"\",\n    version=\"0.0.1\",\n)\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main1-copy",
        "description": "main1-copy",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\ndef get_image_from_bytes(image_bytes):\n    # Function to convert image bytes to a PIL Image",
        "detail": "main1-copy",
        "documentation": {}
    },
    {
        "label": "ssl._create_default_https_context",
        "kind": 5,
        "importPath": "pytorch_tutorial",
        "description": "pytorch_tutorial",
        "peekOfCode": "ssl._create_default_https_context = ssl._create_unverified_context\n# model = torch.hub.load(\"hustvl/yolop\", \"yolop\", pretrained=True)\nmodel = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\n# # %%\n# # with open(\"blackcat.jpg\") as f:\n# img = Image.open(\"blackcat.jpg\")\n# img.show()\n# t = transforms.ToTensor()\n# features = t(img)\n# # %%",
        "detail": "pytorch_tutorial",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "pytorch_tutorial",
        "description": "pytorch_tutorial",
        "peekOfCode": "model = torch.hub.load(\"ultralytics/yolov5\", \"custom\", path=\"best.pt\")\n# # %%\n# # with open(\"blackcat.jpg\") as f:\n# img = Image.open(\"blackcat.jpg\")\n# img.show()\n# t = transforms.ToTensor()\n# features = t(img)\n# # %%\n# # img = torch.randn(1, 3, 640, 640)\n# det_out, da_seg_out, ll_seg_out = model(features)",
        "detail": "pytorch_tutorial",
        "documentation": {}
    }
]